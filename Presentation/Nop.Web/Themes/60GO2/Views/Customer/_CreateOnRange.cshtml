@model OrderFilteringModel.CreateOnRangeFilterModel
@using Nop.Web.Models.Customer;
@{
    var selectedItem = Model.Items.FirstOrDefault(x => x.Selected);
}
@helper FormatCreateOnRangeText(OrderFilteringModel.CreateOnRangeFilterItem filterItem)
{
    string rangeText = "";
    if(filterItem==null)
    {
        rangeText = T("History").Text;
    }
    else
    {
        if (String.IsNullOrWhiteSpace(filterItem.To))
        {
            if (filterItem.Unit == "d")
            { rangeText = string.Format(T("Filtering.CreateOnRangeFilter.LastNDays").Text, filterItem.Increment); }
            if (filterItem.Unit == "m")
            { rangeText = string.Format(T("Filtering.CreateOnRangeFilter.LastNMonths").Text, filterItem.Increment); }
        }
        else
        {
            rangeText = string.Format("{0}-{1}", filterItem.From, filterItem.To);
        }
    }
    <text>@Html.Raw(rangeText)</text>
}
@if (Model.Enabled)
{
    <select class="select-style" name="filter-createon" id="filter-createon" onchange="location=$(this).val()">
        @foreach (var item in Model.Items)
        {
            <option value="@item.FilterUrl" @(selectedItem != null ? (selectedItem.FilterUrl == item.FilterUrl ? "selected" : "") : "")>@FormatCreateOnRangeText(item)</option>
        }
        <option value="@Model.RemoveFilterUrl" @(selectedItem == null ? "selected": "")>@FormatCreateOnRangeText(null)</option>
    </select>
}