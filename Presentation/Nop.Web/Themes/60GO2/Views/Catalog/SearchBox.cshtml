@model SearchBoxModel
@using Nop.Web.Models.Catalog;
@using Nop.Core.Domain.Common;

@*首页 - 顶部站内搜索*@
@{
    var SearchBoxValue = T("Search.SearchBox.Tooltip").Text;
    if (!string.IsNullOrWhiteSpace(Model.QueryKeyWord))
    { SearchBoxValue = Model.QueryKeyWord; }
}
<script type="text/javascript">
    var isOnChanged=false;
    function SetFixedSearchText() {

        if (isOnChanged) {
            return;
        }
        isOnChanged=true;
        $("#small-searchtermsFixed").val($("#small-searchterms").val());
        isOnChanged=false;
 
      
    }
    function SetStaticSearchText() {

        if (isOnChanged) {
            return;
        }
        isOnChanged=true;
        $("#small-searchterms").val($("#small-searchtermsFixed").val());
        isOnChanged=false;
    }
    function CheckIfStaticSearchTextEmpty()
    {
        if ($("#small-searchterms").val() == "@T("Search.SearchBox.Tooltip")") {
            return false;
        }
        return true;
    }
    function CheckIftFixedSearchTextEmpty()
    {
        if ($("#small-searchtermsFixed").val()== "@T("Search.SearchBox.Tooltip")") {
            return false;
        }
        return true;
    }
</script>
@*静态部分*@
@if (Model.ShowMode == ShowMode.Static)
{
    using (Html.BeginRouteForm("ProductSearch", FormMethod.Get, new { onsubmit = "return check_small_search_form()"}))
    {
  
    <div class="searchBox">
        <div class="searchText">
            <input type="text" id="small-searchterms" @(Model.AutoCompleteEnabled ? Html.Raw(" autocomplete=\"off\"") : null)
                name="q"  value="@SearchBoxValue" onpropertychange="SetFixedSearchText()" oninput="SetFixedSearchText()" onfocus="if(this.value=='@T("Search.SearchBox.Tooltip")'){this.value='';}" 
                onblur="if(this.value=='') {this.value = '@T("Search.SearchBox.Tooltip")';}" />
        </div>
        <input id="search-button" type="submit" class="searchBtn" value="" onclick="return CheckIfStaticSearchTextEmpty();">
    </div>

    <p class="hotSearch">
        热门搜索：@Html.Widget("home_page_hot_search_keyword")
    </p>
    
   
    <script type="text/javascript">
        function check_small_search_form() {
            var search_terms = $("#small-searchterms");
            if (search_terms.val() == "") {
                alert('@Html.Raw(HttpUtility.JavaScriptStringEncode(T("Search.EnterSearchTerms").Text))');
                search_terms.focus();
                return false;
            }

            return true;
        }
            @if (Model.AutoCompleteEnabled)
            {
                <text>
                $(function () {
                    $('#small-searchterms').autocomplete({
                        absolute:'absolute',
                        zIndex:'1001',
                        delay: 500,
                        minLength: @(Model.SearchTermMinimumLength.ToString()),
                        source: '@(Url.RouteUrl("ProductSearchAutoComplete"))',
                        select: function( event, ui ) {
                            $("#small-searchterms").val(ui.item.label);
                            setLocation(ui.item.producturl);
                            return false;
                        }
                    }).data("ui-autocomplete")._renderItem = function( ul, item ) {
                        var t = item.label;
                        //html encode
                        t = htmlEncode(t);
                        return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<a>@(
                            Model.ShowProductImagesInSearchAutoComplete 
                            ? Html.Raw("<img src='\" + item.productpictureurl + \"'>") 
                            : null)" + t + "</a>"
                        ).appendTo(ul);
                    };
                });
                </text>
            }
    </script>
    @Html.Widget("searchbox")
    }
}

@*移动部分*@
@if (Model.ShowMode == ShowMode.Fixed)
{
    using (Html.BeginRouteForm("ProductSearch", FormMethod.Get, new { onsubmit = "return check_small_search_formFixed()"}))
    {   
    <div class="fixedSearchBox">
        <div class="fixedSearchText">
            <input type="text" id="small-searchtermsFixed" maxlength="60" @(Model.AutoCompleteEnabled ? Html.Raw(" autocomplete=\"off\"") : null)
                name="q"  value="@SearchBoxValue" onpropertychange="SetStaticSearchText();" oninput="SetStaticSearchText();" onfocus="if(this.value=='@T("Search.SearchBox.Tooltip")')this.value=''" onblur="if(this.value=='') {this.value = '@T("Search.SearchBox.Tooltip")';this.className('ui-autocomplete-input')}" />
        </div>
        <input id="fixed-search-button" name="" type="submit" class="fixedSearchBtn" value="" onclick="return CheckIftFixedSearchTextEmpty();">
    </div>
    
    <script type="text/javascript">
        function check_small_search_formFixed() {
            var search_terms = $("#small-searchtermsFixed");
            if (search_terms.val() == "") {
                alert('@Html.Raw(HttpUtility.JavaScriptStringEncode(T("Search.EnterSearchTerms").Text))');
                search_terms.focus();
                return false;
            }

            return true;
        }
            @if (Model.AutoCompleteEnabled)
            {
                <text>
                $(function () {
                    $('#small-searchtermsFixed').autocomplete({
                        absolute:'fixed',
                        zIndex:'1001',
                        delay: 500,
                        minLength: @(Model.SearchTermMinimumLength.ToString()),
                        source: '@(Url.RouteUrl("ProductSearchAutoComplete"))',
                        select: function( event, ui ) {
                            $("#small-searchtermsFixed").val(ui.item.label);
                            setLocation(ui.item.producturl);
                            return false;
                        }
                    }).data("ui-autocomplete")._renderItem = function( ul, item ) {
                        var t = item.label;
                        //html encode
                        t = htmlEncode(t);
                        return $("<li></li>")
                        .data("item.autocomplete", item)
                        .append("<a>@(Model.ShowProductImagesInSearchAutoComplete ? Html.Raw("<img src='\" + item.productpictureurl + \"'>") : null)" + t + "</a>")
                    .appendTo(ul);
                    };
                });
                </text>
            }
    </script>
    @Html.Widget("searchbox")
    }
}


