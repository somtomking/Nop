@{
    Layout = "~/Administration/Views/Shared/_AdminPopupLayout.cshtml";
}
@model Nop.Admin.Models.Activity.CycleActivityProductModel.AddActivityProductModel
@{
    var gridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSize;

    //page title
    ViewBag.Title = "添加活动商品";
}
@using Telerik.Web.Mvc.UI;
@using (Html.BeginForm())
{
    <div class="section-header">
        <div class="title">
            <img src="@Url.Content("~/Administration/Content/images/ico-catalog.png")" alt="" />
            <span>添加活动商品</span>
        </div>
    </div>    
    
    <table width="100%">
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.SearchProductName):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => Model.SearchProductName)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.SearchCategoryId):
            </td>
            <td class="adminData">
                @Html.DropDownList("SearchCategoryId", Model.AvailableCategories)
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <input type="button" id="search-products" class="t-button" value="@T("Admin.Common.Search")" />
            </td>
        </tr>
    </table>
    <p>
    </p>
    <table class="adminContent">
        <tr>
            <td>
                @(Html.Telerik().Grid<ProductModel>()
                    .Name("products-grid")
                    .Columns(columns =>
                    {
                        columns.Bound(x => x.Id)
                        .Template(
                                @<text>
                <input name="SelectedProductIds" type="checkbox" value="@item.Id " />
                </text>
                        )
                        .ClientTemplate("<input type='checkbox' name='SelectedProductIds' value='<#= Id #>' class='singleCheckBox'/>")
                        .Title("<input id='allCheckBox' type='checkbox'/>")
                        .Width(50);
                        columns.Bound(x => x.Name);
                        columns.Bound(x => x.Published)
                            .Template(
                                @<img alt="" src="@Url.Content("~/Administration/Content/images/active-" + item.Published.ToString().ToLowerInvariant() + ".gif")" />
                            )
                            .ClientTemplate("<img alt='' src='" + Url.Content("~/Administration/Content/images/") + "active-<#= Published #>.gif' />")
                            .Centered()
                            .Width(100);
                    })
                    .Pageable(settings => settings.PageSize(gridPageSize).Position(GridPagerPosition.Both))
                    .DataBinding(dataBinding => dataBinding.Ajax().Select("NonPromotionActivityProductAddPopupList", "Activities"))
                    .ClientEvents(events => events.OnDataBinding("onDataBinding"))
                    .ClientEvents(events=>events.OnDataBound("onDataBound"))
                    .EnableCustomBinding(true))
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <input type="button" name="save" class="t-button" onclick="AddProductsToActivity();" value="@T("Admin.Common.Save")" />
            </td>
        </tr>
    </table>
    
    <script type="text/javascript">
        var selectedIds = [];

        function AddProductsToActivity() {
            $.ajax({
                cache: false,
                type: "POST",
                url: "@(Url.Action("AddProductsToActivity", "Activities"))",
                data: {
                    "btnId": "@Request.QueryString["btnId"]",
                    "formId":"@Request.QueryString["formId"]",
                    "activityProductGroupId":"@Request.QueryString["activityProductGroupId"]",
                    "activityId":"@Request.QueryString["activityId"]",
                    "selectedProductIds":selectedIds.join(',')
                },
                success: function(result) {
                    if (result.IsSuccess == true) {
                        try {
                            window.opener.document.forms['@(ViewBag.formId)'].@(ViewBag.btnId).click();
                        }
                        catch (e){}
                        window.close();
                    }else{
                        alert(result.ErrorInfo);
                    } 
                },
                error: function(xhr, ajaxOptions, thrownError) {
                    alert("添加非促销商品失败！");
                }  
            });
        }

        function onDataBinding(e) {
            var searchModel = {
                    SearchProductName: $('#@Html.FieldIdFor(model => model.SearchProductName)').val(),
                    SearchCategoryId: $('#SearchCategoryId').val()
                };
                e.data = searchModel;
            }

            function onDataBound(e) {
                $('#products-grid input[type=checkbox][class=singleCheckBox]').each(function () {
                    var currentId = $(this).val();
                    var checked = jQuery.inArray(currentId, selectedIds);
                    //set checked based on if current checkbox's value is in selectedIds.  
                    $(this).attr('checked', checked > -1);
                });

                updateAllCheckbox();
            }

            function updateAllCheckbox() {
                var chkBoxes = $('#products-grid input[type=checkbox][class=singleCheckBox]');
                var numChkBoxes = chkBoxes.length;
                var numChkBoxesChecked = 0;
                for (var i = 0; i < numChkBoxes; i++) {
                    if (chkBoxes[i].checked == true) {
                        numChkBoxesChecked++;
                    }
                }
                $('#allCheckBox').attr('checked', numChkBoxes == numChkBoxesChecked && numChkBoxes > 0);
            }

            $(document).ready(function () {
                $('#allCheckBox').click(function () {
                    $('.singleCheckBox').attr('checked', $(this).is(':checked')).change();
                });

                $('#search-products').click(function () {
                    var grid = $('#products-grid').data('tGrid');
                    grid.currentPage = 1; //new search. Set page size to 1
                    grid.ajaxRequest();

                    //clear selected checkboxes
                    $('.singleCheckBox').attr('checked', false).change();
                    selectedIds = [];

                    return false;
                });

                $('#products-grid').on('change', 'input[type=checkbox][class=singleCheckBox]', function (e) {
                    var $check = $(this);
                    if ($check.is(":checked") == true) {
                        var checked = jQuery.inArray($check.val(), selectedIds);
                        if (checked == -1) {
                            //add id to selectedIds.  
                            selectedIds.push($check.val());
                        }
                    }
                    else {
                        var checked = jQuery.inArray($check.val(), selectedIds);
                        if (checked > -1) {
                            //remove id from selectedIds.  
                            selectedIds = $.grep(selectedIds, function (item, index) {
                                return item != $check.val();
                            });
                        }
                    }
                    updateAllCheckbox();
                });

            });
        
            $("#@Html.FieldIdFor(model => model.SearchProductName)").keydown(function (event) {
            if (event.keyCode == 13) {
                $("#search-products").click();
                return false;
            }
        });

        
    </script>
}