@{
    Layout = "~/Administration/Views/Shared/_AdminPopupLayout.cshtml";
    var gridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSize;
}
@model Nop.Plugin.Widgets.CustomProductGroup.Models.ProductAddModel

@using Nop.Core.Domain.Common
@using Nop.Core.Infrastructure
 
@using Nop.Web.Framework
@using (Html.BeginForm())
{
       <div class="section-header">
        <div class="title">
            <img src="@Url.Content("~/Administration/Content/images/ico-catalog.png")" alt="" />
            选择商品
        </div>
    </div> 
    <table width="100%">
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.SearchProductName):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => Model.SearchProductName)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.SearchCategoryId):
            </td>
            <td class="adminData">
                @Html.DropDownList("SearchCategoryId", Model.AvailableCategories)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.SearchManufacturerId):
            </td>
            <td class="adminData">
                @Html.DropDownList("SearchManufacturerId", Model.AvailableManufacturers)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.SearchStoreId):
            </td>
            <td class="adminData">
                @Html.DropDownList("SearchStoreId", Model.AvailableStores)
            </td>
        </tr>
        <tr @(Model.IsLoggedInAsVendor ? Html.Raw("style='display: none;'") : null)>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.SearchVendorId):
            </td>
            <td class="adminData">
                @Html.DropDownList("SearchVendorId", Model.AvailableVendors)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.SearchProductTypeId):
            </td>
            <td class="adminData">
                @Html.DropDownList("SearchProductTypeId", Model.AvailableProductTypes)
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <input type="button" id="search-products" class="t-button" value="@T("Admin.Common.Search")" />
            </td>
        </tr>
    </table>
    <p>
    </p>
    <table class="adminContent">
        <tr>
            <td>
                @(Html.Telerik().Grid<Nop.Admin.Models.Catalog.ProductModel>()
                      .Name("products-grid")
                      .Columns(columns =>
                      {
                          columns.Bound(x => x.Id)
                              .Template(
                                  @<text>
                                      <input name="SelectedProductIds" type="checkbox" value="@item.Id " />
                                   </text>
                              )
                              .ClientTemplate("<input type='checkbox' name='SelectedProductIds' class='singleCheckBox' value='<#= Id #>' />")
                              .Title("<input id='allCheckBox' type='checkbox'/>")
                              .Width(50);
                          columns.Bound(x => x.Name);
                          columns.Bound(x => x.Sku);
                          columns.Bound(x => x.Price);
                          columns.Bound(x => x.Published)
                              .Template(
                                  @<img alt="" src="@Url.Content("~/Administration/Content/images/active-" + item.Published.ToString().ToLowerInvariant() + ".gif")" />
                              )
                              .ClientTemplate("<img alt='' src='" + Url.Content("~/Administration/Content/images/") + "active-<#= Published #>.gif' />")
                              .Centered()
                              .Width(100);
                      })
                      .Pageable(settings => settings.PageSize(gridPageSize).Position(GridPagerPosition.Both))
                      .DataBinding(dataBinding => dataBinding.Ajax().Select("AssociatedProductAddPopupList", "Product"))
                      .ClientEvents(events => events.OnDataBinding("onDataBinding"))
                      .ClientEvents(events => events.OnDataBound("onDataBound"))
                      .EnableCustomBinding(true))
            </td>
        </tr>
        <tr>
            
            <td  colspan="2">
                @Html.NopLabelFor(model => model.Plantform):
                @Html.DropDownListFor(model => model.Plantform, new List<SelectListItem> { new SelectListItem { Text = "所有平台", Value = ((int)PlantformType.Default).ToString() }, new SelectListItem { Text = "PC", Value = ((int)PlantformType.PC).ToString() }, new SelectListItem { Text = "APP", Value = ((int)PlantformType.APP).ToString() } })
                @Html.ValidationMessageFor(model => model.Plantform)
                <input id="btnSave" name="save" onclick="AddProductsToGroup();" type="button" class="t-button" value="保存" />
            </td>
        </tr>
    </table>
    
     
    <script type="text/javascript">
        var selectedIds = [];

        function updateAllCheckbox() {
            var chkBoxes = $('#products-grid input[type=checkbox][class=singleCheckBox]');
            var numChkBoxes = chkBoxes.length;
            var numChkBoxesChecked = 0;
            for (var i = 0; i < numChkBoxes; i++) {
                if (chkBoxes[i].checked == true) {
                    numChkBoxesChecked++;
                }
            }
            $('#allCheckBox').attr('checked', numChkBoxes == numChkBoxesChecked && numChkBoxes > 0);
        }

        function AddProductsToGroup() {

            if (selectedIds.length==0) {
                alert('请选择商品!');
                return;
            }
            $.ajax({
                cache: false,
                type: "POST",
                traditional: true,
                url: "@(Url.RouteUrl("Plugin.Widgets.CustomProductGroup.EditProductPopup2"))",
                data: {
                    "plantform": $('#@Html.FieldIdFor(s=>s.Plantform)').val(),
                    "customProductGroupId": "@ViewBag.CustomProductGroupId",
                    "selectedProductIds":selectedIds
                },
            success: function(result) {
                if (result.Success == true) {
                    try {
                        try {
                            window.opener.document.getElementById("btnRefresh").click();
                            window.opener.opener.document.getElementById("btnRefresh").click();
                        } catch (e) { }
                      
                    }
                    catch (e){}
                    window.close();
                }else{
                    alert(result.Msg);
                } 
            },
            error: function(xhr, ajaxOptions, thrownError) {
                alert('添加商品失败！');
            }  
        });
        }

        $(document).ready(function () {

            $('#allCheckBox').click(function () {
                $('.singleCheckBox').attr('checked', $(this).is(':checked')).change();
            });

            $('#search-products').click(function () {
                var grid = $('#products-grid').data('tGrid');
                grid.currentPage = 1; //new search. Set page size to 1
                grid.ajaxRequest();
                //clear selected checkboxes
                $('.singleCheckBox').attr('checked', false).change();
                selectedIds = [];
                return false;
            });

           


            $('#products-grid').on('change', 'input[type=checkbox][class=singleCheckBox]', function (e) {
                var $check = $(this);
                if ($check.is(":checked") == true) {
                    var checked = jQuery.inArray($check.val(), selectedIds);
                    if (checked == -1) {
                        //add id to selectedIds.  
                        selectedIds.push($check.val());
                    }
                }
                else {
                    var checked = jQuery.inArray($check.val(), selectedIds);
                    if (checked > -1) {
                        //remove id from selectedIds.  
                        selectedIds = $.grep(selectedIds, function (item, index) {
                            return item != $check.val();
                        });
                    }
                }
                updateAllCheckbox();
            });
        });

        $("#@Html.FieldIdFor(model => model.SearchProductName)").keydown(function (event) {
            if (event.keyCode == 13) {
                $("#search-products").click();
                return false;
            }
        });

        function onDataBinding(e) {
            var searchModel = {
                SearchProductName: $('#@Html.FieldIdFor(model => model.SearchProductName)').val(),
                SearchCategoryId: $('#SearchCategoryId').val(),
                SearchManufacturerId: $('#SearchManufacturerId').val(),
                SearchStoreId: $('#SearchStoreId').val(),
                SearchVendorId: $('#SearchVendorId').val(),
                SearchProductTypeId: $('#SearchProductTypeId').val()
            };
            e.data = searchModel;
        }

        function onDataBound(e) {
            $('#products-grid input[type=checkbox][class=singleCheckBox]').each(function () {
                var currentId = $(this).val();
                var checked = jQuery.inArray(currentId, selectedIds);
                //set checked based on if current checkbox's value is in selectedIds.  
                $(this).attr('checked', checked > -1);
            });

            updateAllCheckbox();
        }


      
    </script>
}